!function(){"use strict";function e(e,t,r,i){function n(e){var n=t.defer(),o=new XMLHttpRequest;return o.open("GET",e,!0),o.responseType="arraybuffer",o.onreadystatechange=function(){if(4===o.readyState){if(200!==o.status&&0!==o.status)return r.error(String.format("fileLoader.loadFileFromPath(): XMLHttpRequestError at method loadFileFromPath - {0}",o.status)),n.reject(i.FILE.ERROR.LOAD_FROM_PATH),n.promise;var t={};t.content=o.response,t.name=e.replace(/^.*[\\\/]/,""),n.resolve(t)}},o.send(null),n.promise}function o(e){var r=t.defer();if(Utilities.isUndefinedOrNull(i.FILE.SUPPORTED_FILE_TYPES[Utilities.getFileExtension(e.name)]))return r.reject(i.FILE.ERROR.UNSUPPORTED_FILE_TYPE),r.promise;var n=new FileReader,o={};return o.name=encodeURI(e.name),n.onload=function(){o.content=new Int8Array(n.result),r.resolve(o)},n.readAsArrayBuffer(e),r.promise}function a(e,a){var l=t.defer();if(Utilities.isUndefinedOrNull(e)||Utilities.isUndefinedOrNull(a)&&a!==i.FILE.ORIGIN.HTML5&&a!==i.FILE.ORIGIN.LOCAL_PATH)return l.reject(String.format("fileLoader.loadFile(): Invalid argument: fileInfo: {0}, fileOrigin: {1}",JSON.stringify(e),a)),l.promise;if(a===i.FILE.ORIGIN.HTML5){if(e.size>i.FILE.MAX_SIZE_BYTE_LIMIT)return r.info(String.format("fileLoader.loadFile(): Attempt to upload file with size exceeding limit - {0} bytes",e.size)),l.reject(i.FILE.ERROR.FILE_SIZE_MAX_EXCEEDED),l.promise;o(e).then(function(e){l.resolve(e)},function(e){l.reject(e)})}else n(e).then(function(e){e.content.byteLength>i.FILE.MAX_SIZE_BYTE_LIMIT&&(r.info(String.format("fileLoader.loadFile(): Attempt to upload file with size exceeding limit - {0} bytes",e.content.byteLength)),l.reject(i.FILE.ERROR.FILE_SIZE_MAX_EXCEEDED)),l.resolve(e)},function(e){l.reject(e)});return l.promise}var l={loadFile:a};return l}angular.module("app.file").factory("fileLoader",["$http","$q","$log","constants",e])}();