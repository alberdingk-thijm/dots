!function(){"use strict";function r(r,t,e,o,n){var i=0,s={responseError:function(s){if(s)switch(s.status){case 0:t.debug(String.format("httpErrorResponseInterceptor - Request cancelled - {0}",s.config.url));break;case 401:t.info(String.format("httpErrorResponseInterceptor - {0} - {1} - {2}",s.status,s.config.url,JSON.stringify(s.data)));break;case 400:if(Utilities.isNotUndefinedOrNull(s.data)&&Utilities.isNotUndefinedOrNull(s.data.error_codes)&&50001===s.data.error_codes[0]){t.info(String.format("httpErrorResponseInterceptor -  Invalid AADSerivce - {0} - {1}",s.status,JSON.stringify(s.data)));break}if(Utilities.isNotUndefinedOrNull(s.data)&&Utilities.isNotUndefinedOrNull(s.data.error_codes)&&50079===s.data.error_codes[0]){if(t.info(String.format("httpErrorResponseInterceptor -  Interaction required - {0} - {1}",s.status,JSON.stringify(s.data))),i<n.ERROR_RETRIES.HTTP_REQUEST)return i++,e(function(){var r=o.get("$http");return r(s.config)},n.TIMEOUT.USER_INFO_LOOKUP);i=0}t.error(String.format("httpErrorResponseInterceptor - {0} - {1} - {2}",s.status,s.config.url,JSON.stringify(s.data)));break;default:t.error(String.format("httpErrorResponseInterceptor - {0} - {1} - {2}",s.status,s.config.url,JSON.stringify(s.data)))}return r.reject(s)}};return s}angular.module("app.common").factory("httpErrorResponseInterceptor",["$q","$log","$timeout","$injector","constants",r])}();